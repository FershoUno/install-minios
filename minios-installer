#!/bin/bash

. /usr/lib/minioslib || exit 1
VERSION="1.0"
CWD=$(pwd)
read_config /etc/minios/config LIVEKITNAME
LIVEKITNAME=${LIVEKITNAME:-"minios"}
read_config /etc/minios/buildconfig SYSTEMNAME
SYSTEMNAME=${SYSTEMNAME:-"MiniOS"}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        pkexec "$0"
        exit 0
    fi
}
translate() {
    local text=$1
    local lang=$(locale | grep LANG | cut -d= -f2 | cut -d_ -f1)
    local translation_file="/usr/share/minios/minios-installer/$lang.json"
    if [ -f "$translation_file" ]; then
        local translation=$(jq -r --arg text "$text" '.[$text]' "$translation_file")
        if [ "$translation" != "null" ]; then
            echo $translation
        else
            echo $text
        fi
    else
        echo $text
    fi
}
list_disks() {
    available_disks=$(lsblk -Jo NAME,SIZE -n -d -I 3,8,259,252 | jq -r '.blockdevices[] | .name + "(" + .size + ")"')
    available_disks=$(echo $available_disks | tr ' ' '!')
    available_filesystems="btrfs!ext2!ext4!fat32!ntfs!xfs"
}
partition_disk() {
    echo -e "o\nn\np\n1\n\n\nw" | fdisk /dev/"$selected_disk"
}
delete_partition() {
    echo -e "d\nw" | fdisk /dev/$selected_disk
}
format_partition() {
    local partition="/dev/$selected_partition"
    local filesystem="$2"
    if [ "$filesystem" = "fat32" ]; then
        mkfs.vfat "$partition"
    else
        mkfs.$filesystem "$partition"
    fi
}
mount_disk() {
    if ! mount /dev/$selected_partition $DESTINATION; then
        exit 1
    fi
}
copy_files() {
    #cp -R $MINIOS_LIVE_CD_PATH/* $DESTINATION/
    if [ -d /run/initramfs/memory ]; then
        SOURCE="/run/initramfs/memory"
    elif [ -d /memory ]; then
        SOURCE="/memory"
    fi
    LIVEKITNAME="minios"
    if [ -e "$SOURCE/data/$LIVEKITNAME/boot/isolinux.bin" ]; then
        MINIOS=$SOURCE/data/$LIVEKITNAME
    elif [ -e "$SOURCE/iso/$LIVEKITNAME/boot/isolinux.bin" ]; then
        MINIOS=$SOURCE/iso/$LIVEKITNAME
    elif [ -e "$SOURCE/toram/boot/isolinux.bin" ]; then
        MINIOS=$SOURCE/toram
    elif [ -e "$SOURCE/data/from/0/$LIVEKITNAME/boot/isolinux.bin" ]; then
        MINIOS=$SOURCE/data/from/0/$LIVEKITNAME
    fi

    if [ "$MINIOS" = "" ]; then
        echo "Cannot find boot/isolinux.bin in MiniOS data" >&2
        exit 2
    fi

    EFI="$MINIOS/boot/EFI"

    echo $SYSTEMNAME >/tmp/info
    cat <<EOF >/tmp/README
################################### README ####################################
* To install MiniOS, copy the contents of the ISO to the root of the media,
  then run minios\boot\bootinst.bat on Windows, or minios/boot/bootinst.sh
  on Linux.
* When installed on media with fat32 and ntfs file systems, changes in
  persistent changes mode will be saved in the minios\changes\changes.dat.x
  files, the files expands dynamically, the maximum size of each file is 4 GB.
* When installed on media with ext2-ext4, xfs, btrfs file systems, changes in
  the persistent changes mode will be saved in the minios\changes folder with
  no size limit.
###############################################################################
EOF

    GRAFT=$(
        cd "$MINIOS"
        find . -type f | sed -r "s:^[.]/::" | egrep -v "^boot/isolinux.(bin|boot)$" | egrep -v "^boot/isohdpfx.(bin|boot)$" | egrep -v "^changes/" | egrep -v "$REGEX" | while read LINE; do
            echo "$LIVEKITNAME/$LINE=$MINIOS/$LINE"
        done
        cd "$EFI"
        find . -type f | sed -r "s:^[.]/::" | egrep -v "$REGEX" | while read LINE; do
            echo "EFI/$LINE=$EFI/$LINE"
        done
        echo ".disk/info=/tmp/info"
        echo "README=/tmp/README"
        echo "$LIVEKITNAME/$LIVEKITNAME.conf=/etc/$LIVEKITNAME/$LIVEKITNAME.conf"
        echo "$LIVEKITNAME/boot/grub/grub.cfg=/etc/$LIVEKITNAME/grub.cfg"
        echo "$LIVEKITNAME/boot/syslinux.cfg=/etc/$LIVEKITNAME/syslinux.cfg"
    )
    while IFS='=' read -r DESTINATION_FILE SOURCE_FILE; do
        echo "Copying $SOURCE_FILE to $DESTINATION/$DESTINATION_FILE"
        mkdir -p "$DESTINATION/$(dirname "$DESTINATION_FILE")"
        cp "$SOURCE_FILE" "$DESTINATION/$DESTINATION_FILE"
    done <<<"$GRAFT"
    mkdir -p $DESTINATION/$LIVEKITNAME/{boot,modules,changes,scripts}
}
run_boot_installer() {
    BOOT="$DESTINATION/$LIVEKITNAME/boot"
    cd "$BOOT"

    # find out device and mountpoint
    PART="$(df . | tail -n 1 | tr -s " " | cut -d " " -f 1)"
    DEV="$(echo "$PART" | sed -r "s:[0-9]+\$::" | sed -r "s:([0-9])[a-z]+\$:\\1:i")"

    ARCH=$(uname -m)
    if [ "$ARCH" = "x86_64" ]; then ARCH=64; else ARCH=32; fi
    EXTLINUX=extlinux.x$ARCH

    if [ ! -x ./$EXTLINUX ]; then
        mount -o remount,exec $DEV
        chmod a+x ./$EXTLINUX
    fi

    if [ ! -x ./$EXTLINUX ]; then
        cp -f ./$EXTLINUX ./extlinux.exe
        EXTLINUX=extlinux.exe
    fi

    # install syslinux bootloader
    ./"$EXTLINUX" --install "$BOOT"

    if [ $? -ne 0 ]; then
        echo "Error installing boot loader."
        exit 1
    fi

    if [ "$DEV" != "$PART" ]; then
        # Setup MBR on the first block
        dd bs=440 count=1 conv=notrunc if="$BOOT/mbr.bin" of="$DEV" 2>/dev/null

        # Toggle bootable flags
        PART="$(echo "$PART" | sed -r "s:.*[^0-9]::")"
        (
            fdisk -l "$DEV" | fgrep "*" | fgrep "$DEV" | cut -d " " -f 1 |
                sed -r "s:.*[^0-9]::" | xargs -I '{}' echo -ne "a\n{}\n"
            echo a
            echo $PART
            echo w
        ) | fdisk $DEV >/dev/null 2>&1
    fi

    # UEFI boot loader
    cp -r "EFI" "$BOOT/../../"

    echo "Boot installation finished."
    cd "$CWD"
}
install_minios() {
    (
        echo "0"
        echo "$(translate "Formatting disk /dev/$selected_partition with MBR partition table and") $selected_filesystem $(translate "file system...")"
        echo "10"
        delete_partition
        partition_disk
        format_partition "$selected_partition" "$selected_filesystem"
        echo "30"
        echo "$(translate "Creating a new partition on disk /dev/$selected_partition...")"
        echo "40"
        mkdir -p $DESTINATION
        echo "60"
        echo "$(translate "Mounting the new partition on disk /dev/$selected_partition...")"
        echo "70"
        mount_disk
        echo "80"
        echo "$(translate "Copying MiniOS files to the new partition on disk /dev/$selected_partition...")"
        echo "90"
        copy_files
        echo "100"
        echo "$(translate "Running the MiniOS boot installer on disk /dev/$selected_partition...")"
        run_boot_installer
    ) | yad --progress --title="$(translate "Installing MiniOS")" --text="$(translate "Starting installation of MiniOS on disk /dev/$selected_partition...")" --auto-close --auto-kill
    if [ $? -eq 0 ]; then
        yad --info --title="$(translate "Installation Complete")" --text="$(translate "Installation of MiniOS on disk") /dev/$selected_partition $(translate "has been completed successfully.")" --no-wrap
        #force_exit
    else
        yad --error --title="$(translate "Error")" --text="$(translate "An error occurred during the installation of MiniOS on disk") /dev/$selected_partition ."
    fi
    final_question
}

function final_question() {

  selection=$(yad --form \
    --title="$(translate "Completion Message")" \
    --text="$(translate "Thank you for installing MiniOS")" \
    --width=300 --height=200 \
    --buttons-layout="center" \
    --on-top \
    --form \
    --button="$(translate "Return to Installer")":0 \
    --button="$(translate "Restart the Computer")":1
  )

  button_question "$selection"
}

button_question() {
  local button_question=$?

  case $button_question in
    0) # Return to Main Menu
      main_menu
      ;;
    1) # Restart the Computer
      reboot
      ;;
  esac
}
main_menu() {
    list_disks
    selection=$(
        yad --form \
            --title="$(translate "Options Menu")" \
            --text="$(translate "Select installation options for MiniOS. Choose the device and file system to install MiniOS on."):\n" \
            --width=300 --height=200 \
            --buttons-layout="center" \
            --on-top \
            --form \
            --field="$(translate "Select device"):CB" "${available_disks}" \
            --field="$(translate "Select file system"):CB" "${available_filesystems}" \
            --button=gtk-cancel:101 \
            --button="$(translate "Install")!ubiquity":102 \
            --button=gtk-refresh:103

    )
    local button_clicked=$?
    echo $button_clicked $selection
    selected_device=$(echo "$selection" | cut -d"|" -f1)
    selected_disk=$(echo $selected_device | cut -d "(" -f 1)
    selected_partition="${selected_disk}1"
    selected_filesystem=$(echo "$selection" | cut -d "|" -f2)
    DESTINATION="/mnt/$selected_partition"

    handle_button_click "$button_clicked"
}
handle_button_click() {
    local button=$1
    case $button in
    101)
        exit 0
        ;;
    102)
        install_minios
        ;;
    103)
        main_menu
        ;;
    esac
}

check_root
main_menu
